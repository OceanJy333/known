// SVG知识卡片模板系统

export interface SVGTemplate {
  id: string
  name: string
  category: 'modern' | 'minimal' | 'academic' | 'creative'
  description: string
  icon: string
  generate: (content: ExtractedContent) => string
}

export interface ExtractedContent {
  title: string
  summary: string
  keyPoints: string[]
  tags: string[]
}

// 工具函数：文本换行处理
function wrapText(text: string, maxLength: number = 25): string[] {
  const words = text.split('')
  const lines: string[] = []
  let currentLine = ''
  
  for (const char of words) {
    if (currentLine.length + 1 <= maxLength) {
      currentLine += char
    } else {
      if (currentLine) lines.push(currentLine)
      currentLine = char
    }
  }
  if (currentLine) lines.push(currentLine)
  
  return lines
}

// 现代商务模板
const modernTemplate: SVGTemplate = {
  id: 'modern',
  name: '现代商务',
  category: 'modern',
  description: '简洁现代的设计风格，适合专业内容',
  icon: 'fas fa-briefcase',
  generate: (content: ExtractedContent) => {
    const titleLines = wrapText(content.title, 20)
    const summaryLines = wrapText(content.summary, 35)
    
    return `<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="modernBg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#f8fafc;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#e2e8f0;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="4" stdDeviation="8" flood-opacity="0.1"/>
    </filter>
  </defs>
  
  <!-- 背景 -->
  <rect width="400" height="600" fill="url(#modernBg)" rx="16" filter="url(#shadow)"/>
  
  <!-- 顶部品牌区 -->
  <rect x="0" y="0" width="400" height="60" fill="#3b82f6" rx="16"/>
  <rect x="0" y="16" width="400" height="44" fill="#3b82f6"/>
  
  <!-- 品牌标识 -->
  <text x="350" y="35" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="16" font-weight="600" fill="white" text-anchor="end">沉淀</text>
  
  <!-- 分类标签 -->
  <rect x="20" y="20" width="60" height="24" fill="rgba(255,255,255,0.2)" rx="12"/>
  <text x="50" y="34" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="12" fill="white" text-anchor="middle">知识</text>
  
  <!-- 标题区 -->
  <g transform="translate(20, 90)">
    ${titleLines.map((line, index) => 
      `<text x="0" y="${index * 32}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="24" font-weight="700" fill="#1f2937">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 分割线 -->
  <line x1="20" y1="${160 + titleLines.length * 32}" x2="380" y2="${160 + titleLines.length * 32}" 
        stroke="#e5e7eb" stroke-width="2"/>
  
  <!-- 摘要区 -->
  <g transform="translate(20, ${180 + titleLines.length * 32})">
    <text x="0" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
          font-size="14" font-weight="600" fill="#6b7280">核心观点</text>
    ${summaryLines.map((line, index) => 
      `<text x="0" y="${30 + index * 20}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="16" fill="#374151" line-height="1.5">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 要点区 -->
  <g transform="translate(20, ${280 + titleLines.length * 32 + summaryLines.length * 20})">
    <text x="0" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
          font-size="14" font-weight="600" fill="#6b7280">关键要点</text>
    ${content.keyPoints.slice(0, 4).map((point, index) => `
      <g transform="translate(0, ${25 + index * 30})">
        <circle cx="6" cy="0" r="3" fill="#3b82f6"/>
        <text x="20" y="4" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
              font-size="14" fill="#374151">${point}</text>
      </g>
    `).join('')}
  </g>
  
  <!-- 标签区 -->
  <g transform="translate(20, ${420 + titleLines.length * 32 + summaryLines.length * 20})">
    ${content.tags.slice(0, 4).map((tag, index) => `
      <rect x="${index * 80}" y="0" width="${tag.length * 14 + 16}" height="26" 
            fill="#eff6ff" stroke="#3b82f6" stroke-width="1" rx="13"/>
      <text x="${index * 80 + 8 + tag.length * 7}" y="16" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
            font-size="12" fill="#3b82f6" text-anchor="middle">#${tag}</text>
    `).join('')}
  </g>
  
  <!-- 底部品牌信息 -->
  <rect x="0" y="560" width="400" height="40" fill="#f1f5f9"/>
  <text x="200" y="582" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="12" fill="#64748b" text-anchor="middle">Generated by 沉淀 · AI Memory Precipitator</text>
</svg>`
  }
}

// 极简主义模板
const minimalTemplate: SVGTemplate = {
  id: 'minimal',
  name: '极简主义',
  category: 'minimal',
  description: '纯净简洁，专注内容本身',
  icon: 'fas fa-th-large',
  generate: (content: ExtractedContent) => {
    const titleLines = wrapText(content.title, 20)
    const summaryLines = wrapText(content.summary, 35)
    
    return `<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <!-- 背景 -->
  <rect width="400" height="600" fill="#ffffff" stroke="#e5e7eb" stroke-width="1"/>
  
  <!-- 顶部品牌 -->
  <text x="380" y="30" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="14" font-weight="300" fill="#9ca3af" text-anchor="end">沉淀</text>
  
  <!-- 标题区 -->
  <g transform="translate(40, 80)">
    ${titleLines.map((line, index) => 
      `<text x="0" y="${index * 36}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="28" font-weight="300" fill="#111827">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 分割线 -->
  <line x1="40" y1="${140 + titleLines.length * 36}" x2="360" y2="${140 + titleLines.length * 36}" 
        stroke="#d1d5db" stroke-width="1"/>
  
  <!-- 摘要区 -->
  <g transform="translate(40, ${170 + titleLines.length * 36})">
    ${summaryLines.map((line, index) => 
      `<text x="0" y="${index * 24}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="16" font-weight="300" fill="#4b5563">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 要点区 -->
  <g transform="translate(40, ${250 + titleLines.length * 36 + summaryLines.length * 24})">
    ${content.keyPoints.slice(0, 4).map((point, index) => `
      <text x="0" y="${index * 32}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
            font-size="14" font-weight="300" fill="#6b7280">· ${point}</text>
    `).join('')}
  </g>
  
  <!-- 标签区 -->
  <g transform="translate(40, ${420 + titleLines.length * 36 + summaryLines.length * 24})">
    ${content.tags.slice(0, 4).map((tag, index) => `
      <text x="${index * 80}" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
            font-size="12" font-weight="300" fill="#9ca3af">#${tag}</text>
    `).join('')}
  </g>
  
  <!-- 底部 -->
  <text x="200" y="570" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="10" fill="#d1d5db" text-anchor="middle">Generated by 沉淀</text>
</svg>`
  }
}

// 学术风格模板
const academicTemplate: SVGTemplate = {
  id: 'academic',
  name: '学术风格',
  category: 'academic',
  description: '严肃正式，适合学术研究',
  icon: 'fas fa-graduation-cap',
  generate: (content: ExtractedContent) => {
    const titleLines = wrapText(content.title, 18)
    const summaryLines = wrapText(content.summary, 32)
    
    return `<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <!-- 背景 -->
  <rect width="400" height="600" fill="#fefefe" stroke="#333333" stroke-width="2"/>
  
  <!-- 页眉 -->
  <rect x="0" y="0" width="400" height="50" fill="#2d3748"/>
  <text x="20" y="30" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="14" font-weight="600" fill="white">KNOWLEDGE CARD</text>
  <text x="380" y="30" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="12" font-weight="400" fill="#a0aec0" text-anchor="end">沉淀</text>
  
  <!-- 标题区 -->
  <g transform="translate(30, 90)">
    ${titleLines.map((line, index) => 
      `<text x="0" y="${index * 30}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="22" font-weight="700" fill="#1a202c">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 摘要区 -->
  <rect x="20" y="${140 + titleLines.length * 30}" width="360" height="${summaryLines.length * 20 + 20}" 
        fill="#f7fafc" stroke="#e2e8f0" stroke-width="1"/>
  <g transform="translate(30, ${155 + titleLines.length * 30})">
    <text x="0" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
          font-size="12" font-weight="600" fill="#4a5568">ABSTRACT</text>
    ${summaryLines.map((line, index) => 
      `<text x="0" y="${20 + index * 18}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="14" fill="#2d3748">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 要点区 -->
  <g transform="translate(30, ${220 + titleLines.length * 30 + summaryLines.length * 20})">
    <text x="0" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
          font-size="12" font-weight="600" fill="#4a5568">KEY POINTS</text>
    ${content.keyPoints.slice(0, 4).map((point, index) => `
      <g transform="translate(0, ${20 + index * 25})">
        <rect x="0" y="-3" width="4" height="16" fill="#2d3748"/>
        <text x="12" y="8" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
              font-size="13" fill="#2d3748">${point}</text>
      </g>
    `).join('')}
  </g>
  
  <!-- 关键词区 -->
  <g transform="translate(30, ${370 + titleLines.length * 30 + summaryLines.length * 20})">
    <text x="0" y="0" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
          font-size="12" font-weight="600" fill="#4a5568">KEYWORDS</text>
    ${content.tags.slice(0, 4).map((tag, index) => `
      <rect x="${index * 85}" y="10" width="${tag.length * 8 + 12}" height="20" 
            fill="none" stroke="#4a5568" stroke-width="1"/>
      <text x="${index * 85 + 6}" y="23" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
            font-size="11" fill="#4a5568">${tag.toUpperCase()}</text>
    `).join('')}
  </g>
  
  <!-- 页脚 -->
  <line x1="20" y1="550" x2="380" y2="550" stroke="#e2e8f0" stroke-width="1"/>
  <text x="200" y="575" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="10" fill="#718096" text-anchor="middle">Generated by 沉淀 · AI Memory Precipitator</text>
</svg>`
  }
}

// 创意风格模板
const creativeTemplate: SVGTemplate = {
  id: 'creative',
  name: '创意风格',
  category: 'creative',
  description: '活泼创意，充满想象力',
  icon: 'fas fa-palette',
  generate: (content: ExtractedContent) => {
    const titleLines = wrapText(content.title, 18)
    const summaryLines = wrapText(content.summary, 30)
    
    return `<svg width="400" height="600" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="creativeBg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
    </linearGradient>
    <filter id="glow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- 背景 -->
  <rect width="400" height="600" fill="url(#creativeBg)" rx="20"/>
  
  <!-- 装饰图形 -->
  <circle cx="350" cy="50" r="30" fill="rgba(255,255,255,0.1)"/>
  <circle cx="50" cy="550" r="40" fill="rgba(255,255,255,0.08)"/>
  <path d="M 100 100 Q 150 80 200 100 T 300 100" stroke="rgba(255,255,255,0.2)" stroke-width="2" fill="none"/>
  
  <!-- 品牌标识 -->
  <circle cx="350" cy="40" r="25" fill="rgba(255,255,255,0.2)"/>
  <text x="350" y="46" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="14" font-weight="600" fill="white" text-anchor="middle">沉淀</text>
  
  <!-- 标题区 -->
  <g transform="translate(30, 100)">
    ${titleLines.map((line, index) => 
      `<text x="0" y="${index * 35}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="26" font-weight="700" fill="white" filter="url(#glow)">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 摘要区 -->
  <rect x="20" y="${170 + titleLines.length * 35}" width="360" height="${summaryLines.length * 22 + 30}" 
        fill="rgba(255,255,255,0.15)" rx="15" backdrop-filter="blur(10px)"/>
  <g transform="translate(35, ${190 + titleLines.length * 35})">
    ${summaryLines.map((line, index) => 
      `<text x="0" y="${index * 22}" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
             font-size="16" fill="white">${line}</text>`
    ).join('')}
  </g>
  
  <!-- 要点区 -->
  <g transform="translate(30, ${260 + titleLines.length * 35 + summaryLines.length * 22})">
    ${content.keyPoints.slice(0, 4).map((point, index) => `
      <g transform="translate(0, ${index * 32})">
        <circle cx="8" cy="0" r="4" fill="#fbbf24"/>
        <text x="20" y="4" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
              font-size="14" fill="white">${point}</text>
      </g>
    `).join('')}
  </g>
  
  <!-- 标签区 -->
  <g transform="translate(30, ${420 + titleLines.length * 35 + summaryLines.length * 22})">
    ${content.tags.slice(0, 3).map((tag, index) => {
      const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1']
      return `
        <rect x="${index * 90}" y="0" width="${tag.length * 12 + 20}" height="28" 
              fill="${colors[index % 3]}" rx="14" opacity="0.8"/>
        <text x="${index * 90 + 10 + tag.length * 6}" y="18" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
              font-size="12" font-weight="600" fill="white" text-anchor="middle">#${tag}</text>
      `
    }).join('')}
  </g>
  
  <!-- 底部 -->
  <text x="200" y="570" font-family="'PingFang SC', 'Microsoft YaHei', sans-serif" 
        font-size="11" fill="rgba(255,255,255,0.7)" text-anchor="middle">✨ Generated by 沉淀 ✨</text>
</svg>`
  }
}

// 导出所有模板
export const SVG_TEMPLATES: SVGTemplate[] = [
  modernTemplate,
  minimalTemplate,
  academicTemplate,
  creativeTemplate
]

// 根据ID获取模板
export function getTemplateById(id: string): SVGTemplate | undefined {
  return SVG_TEMPLATES.find(template => template.id === id)
}

// 获取默认模板
export function getDefaultTemplate(): SVGTemplate {
  return modernTemplate
}